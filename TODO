all in net.minecraft are 3-part-classes, minecraft forge and cpw.mods.fml can be different
load world automatically on start?

how does intermediary work? how handles 1.7.10 method/event to 1.2.5 block?



https://skmedix.github.io/ForgeJavaDocs/javadoc/forge/1.7.10-10.13.4.1614/net/minecraft/world/gen/structure/MapGenVillage.html

Interface methods:
	get_XXX() - returns member variable
	XXXSuper(PARAMS) - calls super.XXX(PARAMS)

for entity mapping where witchery registers its entities into a map, maybe subclass HashMap and hande insertions differently...

--tweakClass org.spongepowered.asm.launch.MixinTweaker --mixin mixins.compatibility.json


Sources:
Eclipse-> Bluild Path-> Add class folder - TEMP_CLASSES
Eclipse project add new source folder (TEMP_CLASSES).
Decompile, put next to .class
start, stop, refresh project explorer
Debug configurations _> Add both to sources and class path


goblins witchery compatibility (java.lang.reflect.Constructor Mixin)

forge tries create mod objects
-> Mixin append code before return in Contructor.newInstance. When "instanceof Compat_Entity", cast to Compat_Entity and invoke .toReal()
- Code in mod calls Compat_Constructor.newInstance, might need to call getFake or so.

Think again: Why "Mod_Block -> Wrapper_Block -> MC_Block" nicht mÃ¶glich?



no new Compat_Item allowed!
use class redirect always!
no abstract "real" classes!

instanceof abfangen oder doublewrap verhinern...?


All mod classes tagged? When usin @Callback, switch on version (CASE V1_7_10 Call_XX, CASE V1_10_2 Call_YY). in constructor, get and save version.
factory checks if child, if yes, creates wrapper.
if this.getClass != Compat_XXX.class then is child
HasCallback with MC Versions, to know it is called for version XXX
find all called methods, like overrides - find method that call into mod class, but are inherited from non-mod.


different sandbox for different mc version, but same mc sandbox... could be problematic in Compat_Class.forName

cache for same build version

always disable dump classes for release
reobf Real classes for production
Mixin into mods only possible starting with 1.14 ?!


https://github.com/jaquadro/Chameleon/tree/1.12/src/com/jaquadro/minecraft/chameleon/render ?
https://github.com/Thog/ISBRH/tree/master/src/main/java/eu/thog92/isbrh/render ?
https://github.com/GollumTeam/RenderCore
getQuads will be called with IBlockState being null when redered as an item
rotate: https://github.com/Vazkii/Botania/blob/e730c2154df09b24bdf79899676165145450eb80/src/main/java/vazkii/botania/client/model/GunModel.java#L82-L106 ?

Tesselator -> WorldRenderer - func_78374_a,addVertexWithUV -> BufferBuilder wr; wr.pos(0, 16, 0).tex(0, 1).endVertex(); Tessellator.getInstance().draw();
ISBRH's only updated on block update

https://github.com/ModCoderPack/MCPBot-Issues/issues?q=is%3Aissue+milestone%3A1.12.0+is%3Aclosed
https://gist.github.com/williewillus/57d7093efa80163e96e0 1.8 rendering primer
https://gist.github.com/williewillus/e37edde85dc78d2e138c 1.8.9 to 1.9 quick primer


implement large flower pot rendering
MinecraftForgeClient#getRenderLayer() - for getting render layer?

ISBRH handler eine ebene höher einmixen, in bakedmodel dann nur das ISBRH result aus dem cache nehmen


ISBRH:
prevent TileEntity NPE LargePot
prevent MultiThread Race condition
implement lender layer (pass0/1)

can't have factory create wrapper when not child, we need getFake() !
Factory check if child, if so, pass flag to constructor to tell it to ignore callbacks? or just use Version.UNKNOWN?




Name methods like "getXFake()" and then use @Names annotation to supply srg/mojang srg names?
same for classes? Just mark class

auto generate code automatically, at least the basic mapping code...

jede auto generierte klasse hat ein getFake, mit annotation @GetFake kann man das überschreiben (block/item singleton)
helper project: nimmt einen input (className), wenn classname eindeutig: generiert Compa_* Klasse automatisch und compatI_ auch. danach muss man nur noch die srg namem festlegen (@Alias)
Alle @Callbacks so generieren:
    switch (version) {
		case V1_18:
			return Compat_func_149662_c(/* params */);
		default:
			throw version.makeException();
		}
	}


do ./gradlew genEclipseRuns, then import gradle project into eclipse workspace

@CompatClass
@CompatMethod

Autogen CompatI_, CompatReal, CompatWrapper_ (or what is the wrapper called?)

Prevent dependency on NEI if NEI is not installed!!

@TempGen to create initial Compat_Class. Can overwrite this very class?

Use project:
- git clean -xdf
- eclipse import gradle project

When changing processor:
- refresh gradle project
- change class using annotation, or clean project

still prevent double wrap!

must make wrapper/real handle all methods, also those from parents!
if real is abstract, make CompatReal abstract as well.

what if pass Compat_Entity(original) to mod and it casts to Compat_EntityCreeper? happens for NBTBase and Compat_EntityPlayer, WorldServer
-> Compat_Entity.getFake has to consider child classes

autorelay hashCode and equals to real methods? -> auto convert to usage of Compat_ funcs. impossible though, maybe used by hashmap as well... maybe just equals -> return wrapper.equals(other) and wrapper implements this

#### more autogen idea
@Parent(Compat_Block.class)
class Compat_BlockFlower extends CompatBase_BlockFlower
{
    @Relay // Lets baseclass handle conversions
    public void setSomething(int par1)
    {
        super(par1)
    }
}
jede klasse ne getReal/getFake methode (im interface)


document architecture somewhere

### callback idea ###
instead of HasCallback/Callback:
@Callback(targets = {"func_12345"}
-> allows to use callbacks across multiple forge versions, e.g. functions the same in 1.16/1.15 don't need extra "@HasCallback({ Version.V1_15_2 })"


https://github.com/jamierocks/fabric-forge/tree/master/fabric-loader-Patches
for fabric: use original fabric loader, just hook into it

###
list of classes with their methods to check which methods need callback? (non func methods added by forge)
generate all super method implicitly
let real/proxy perform fake<->real translations? two super methods, one for without and one for with?


rewrite all resourcelocations / datapacks so that they are projectbabelfish_VERSION_modname

AddPackFindersEvent
Make sure to check the pack type the event fires for. Also, the exact place where you need to create the PackResources instance is not obvious. If you do it too far "out", it won't be recreated on a resource reload, go too far in and it will be rebuilt multiple times in a reload. This is how I did it: https://github.com/XFactHD/BuddingCrystals/blob/1.18.x/src/main/java/xfacthd/buddingcrystals/client/BCClient.java#L36-L55

https://github.com/TheIllusiveC4/CulinaryConstruct/blob/1.18.x/src/main/java/top/theillusivec4/culinaryconstruct/client/model/SandwichModel.java

rename namespaces? would allow two thaumcraftversions, but would break resourcepacks... own resourcepack loader
focus on multimod from the start, all mods own sandbox. eine klasse die die ganzen renames handlet damit alles an einem ort ist.

https://github.com/DarkShadow44/resourcehighlighter-dark/issues/11


##############
replace

public class Compat_ZZZ extends Compat_XXX {
	private CompatI_ZZZ wrapper;

	public Compat_ZZZ() {
		super(ParentSelector.NULL);
		this.initialize(Factory.create(CtorPos.POS1, CompatI_ZZZ.class, this));
	}

	protected Compat_ZZZ(ParentSelector s) {
		super(ParentSelector.NULL);
	}

	public Compat_ZZZ(ZZZ original) {
		super(ParentSelector.NULL);
		this.initialize(Factory.createWrapper(CompatI_ZZZ.class, original));
	}

	protected void initialize(CompatI_ZZZ wrapper) {
		super.initialize(wrapper);
		this.wrapper = wrapper;
	}

	public ZZZ getReal() {
		return wrapper.get();
	}
}

with

add Compat_Object base class

public class Compat_ZZZ extends Compat_XXX {
    private CompatI_ZZZ wrapper;

    public Compat_ZZZ(CompatI_ZZZ wrapper) {
        super(wrapper);
        this.wrapper = wrapper;
    }
    
    public static CompatReal_Block Compat_construct() {
        return new CompatReal_Block();
    }
}

construction is handled in getFake and Compat_construct methods
getReal gan get wrapper via Compat_Object method getReal(), Compat_Object has wrapper as well

Compat_Object also calls wrapper.setCompatObj, since we can't pass the object in the constructor anymore. wrapper.setCompatObj takes object and casts it

in mod, transform:
    new Compat_ZZZ(p1, p2)
to
    new Compat_ZZZ(Compat_ZZZ.Compat_construct(p1, p2))


##############

WrapperToReal_IWorldAccess extends IWorldAccess, WrapperToFake_IWorldAccess extends Compat_IWorldAccess. Also have CompatI_IWorldAccess, just for getFake/getReal

loaded classes in compatClassLoader need to be already transformed, document that and document whether we need / or . as separator


No Compat_ class unless it's MC class. same for methods
direct hashCode/equals to CompatI_

generate methodsSuper for all methods in mc class (and mc superclasses)


wrap all forge specific code into own stuff, handling in own classes, for later cross platform. maybe depend on architectury??

culinary construct 1.7.10 models again

ask fabric discord how to best make it so people don't report babelfish fabric issues to them...




https://raw.githubusercontent.com/FabricMC/intermediary/master/mappings/1.18.2.tiny
https://raw.githubusercontent.com/MinecraftForge/MCPConfig/master/versions/release/1.18.2/joined.tsrg
https://launcher.mojang.com/v1/objects/a661c6a55a0600bd391bdbbd6827654c05b2109c/client.txt

